rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction pour vérifier si l'utilisateur est authentifié
    function isAuthenticated() {
      return request.auth != null;
    }

    // Fonction pour vérifier si l'utilisateur est un admin
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Fonction pour vérifier si l'utilisateur est un formateur
    function isFormateur() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'formateur';
    }

    // Règles pour les paramètres système
    match /settings/system {
      allow read: if true; // Permettre la lecture des paramètres système à tous
      allow write: if isAdmin(); // Seuls les admins peuvent modifier les paramètres
    }

    // Règles pour la collection users
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || request.auth.uid == userId;
      
      // Règles pour les exercices des utilisateurs
      match /exercises/{exerciseId} {
        allow read: if isAuthenticated() && (
          request.auth.uid == userId || 
          isFormateur() || 
          isAdmin()
        );
        allow write: if isAuthenticated() && (
          request.auth.uid == userId || 
          isFormateur() || 
          isAdmin()
        );
      }
    }

    // Règles pour la collection templates
    match /templates/{templateId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || isFormateur();
    }

    // Règles pour la collection exercises
    match /exercises/{exerciseId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // Règles pour les autres collections
    match /{document=**} {
      allow read, write: if isAuthenticated();
    }
  }
}